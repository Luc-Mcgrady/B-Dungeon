<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player_top</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_player_top</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Enviroment constants
image_blend = make_colour_rgb(30, 203, 225)

// Unchangable constants


// Customisation constants


// Variable initialisation
reloaded = 0
reload_time = (3/4) * room_speed // Time in seconds
driven = false

xlastfree = x
ylastfree = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var remaining = instance_number(o_player)
if remaining == 2 {
    with (instance_furthest(x,y,o_player)) {
        driven = true
    }
} else if remaining == 1 {
    var spawner = instance_find(game_spawner,0)    

    if spawner != noone
        with (spawner) 
            failed = true
}

lives--
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//These all used to be constants but i cba to replace them and this is probalby nicer and more efficent anyway

slowdown = 0.75  //Friction, % of acceleration to slow down naturaly by
acceleration = 2 * global.timespeed * (1 + slowdown)

// Movement
if driven {

    var max_speed = 15 * global.timespeed

    if keyboard_check(vk_right) or keyboard_check(ord('D')) {
        hspeed += acceleration
    }
    if keyboard_check(vk_left) or keyboard_check(ord('A')) {
        hspeed -= acceleration 
    }
    if keyboard_check(vk_down) or keyboard_check(ord('S')) {
        vspeed += acceleration
    }
    if keyboard_check(vk_up) or keyboard_check(ord('W')) {
        vspeed -= acceleration
    }
    
    if speed &gt; max_speed {
        speed = max_speed
    }

    // Aim + shoot
    
    image_angle = turn_towards(image_angle, point_direction(x,y,mouse_x,mouse_y), global.timespeed * 15)

    if mouse_check_button_pressed(1) and reloaded == 0
        //and not (place_meeting(mouse_x,mouse_y,o_player) and global.slowtime)
        {
        reloaded = reload_time
        action_shoot()
    }
}

if speed &gt; 0 { //Dont collsion check when still

    if place_free(x,y) { //When not coliding constantly save position
        xlastfree = x
        ylastfree = y
    
    } else { // If collided
        
         if not place_free(xlastfree,ylastfree) { // If the saved safe spot is occupied
         
            var collidedirection = point_direction(x,y,xlastfree,ylastfree)
            var push = 0 //serious out of bounds
            
            while not place_free(xlastfree ,ylastfree) {
                speed = 0
                collidedirection += 10
                push += 0.01
                xlastfree += lengthdir_x(push,collidedirection)
                ylastfree += lengthdir_y(push,collidedirection)
            }
        }
        
        // For simple out of bounds
        
        
        x = xlastfree //+ lengthdir_x(3,collidedirection)
        y = ylastfree //+ lengthdir_y(3,collidedirection)
    }
}

// Decrement variables
reloaded = absdec(reloaded, global.timespeed)
speed = absdec(speed, acceleration * slowdown)

if mouse_check_button_pressed(2) {
    if collision_point(mouse_x, mouse_y, self,false,false) {
        driven = !driven     
    }
    else if not keyboard_check(vk_shift) {
        driven = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>404</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_number</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>o_gate</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>til_room_break</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>306</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_start</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if global.slowtime {

    var radius =    sprite_width/6+
                    (sprite_width*4/6)*(reload_time-reloaded)
                    /(reload_time*2)
    
    if driven{
        draw_set_colour(c_yellow) // Inner circle
        draw_set_alpha(0.5)
        draw_circle(x,y,radius,false)
    }   
    
    

    draw_self()    

    if reloaded == 0 { // Outer circle
        draw_set_colour(c_green)
    } 
    else {
        draw_set_colour(c_red)
    }
    

    
    draw_circle(x,y,radius,true)

//}
//else {
//    draw_self()
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player_rifle_top</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Enviroment constnats
image_blend = make_colour_rgb(225, 53, 30)

// Pathing

path = random_room_path()

// Variable initialisation
reload = 0
reload_pos = 0

reload_times[0] = 0.05 * room_speed
reload_times[1] = 0.1 * room_speed
reload_times[2] = 4 * room_speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Targeting

var target = LOS_instance_closest(o_player,false)



// Turning

// TODO this if statement needs simplifying at some point

var turn_speed = 15

if target == noone and reload_pos == 0{ // If reload_pos is greater than 0 it means we are shooting
    if path != noone
        target_angle = direction
    else
        target_angle = image_angle
} else if reload_pos == 0 {
    target_angle = point_direction(x,y,target.x,target.y)
} else 
    turn_speed = 5

// Shooting
if ((target != noone or reload_pos &gt; 0) and abs(image_angle-target_angle) &lt; 3 and reload == 0){
    if (reload_pos &lt; array_length_1d(reload_times))
        action_shoot()
    
    reload = reload_times[reload_pos] // Reload time
    reload_pos = (reload_pos + 1) % array_length_1d(reload_times)
    
}

image_angle = turn_towards(image_angle,target_angle, global.timespeed*turn_speed)

// Movement

path_speed = global.timespeed * 7 * path_direction

// Reloading

reload = absdec(reload,global.timespeed*4)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_direction = -path_direction
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
